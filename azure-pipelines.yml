trigger: 
  branches:
    include: 
    - releases/*

pool:
  vmImage: "ubuntu-latest" # Define the virtual machine image to use for the pipeline

variables:
  mimicsDownloadUrl: "https://artifacts.rapid7.com/cloudsec/mimics/latest/mimics_latest_linux_amd64" # URL for Mimics download

jobs:
  - job: Rapid7_IaC_CloudFormation_Scanner
    displayName: "Rapid7 IaC scanner"

    steps:
       # Download the IaC Scanning Tool Mimics executable
      - script: |
          wget $(mimicsDownloadUrl) -O $(Agent.ToolsDirectory)/mimics
          chmod +x $(Agent.ToolsDirectory)/mimics
        displayName: "Install Mimics-binary" # Downloads and installs the Mimics tool (binary executable) for infrastructure as code (IaC) scanning

      # Use the Mimics executable to scan the plan.json
      - script: |
          mkdir -p $(System.DefaultWorkingDirectory)/mimics-reports
          $(Agent.ToolsDirectory)/mimics scan \
            $(System.DefaultWorkingDirectory)$(IAC_TEMPLATE_DIR_PATH) \
            --api-key $(ICS_API_KEY) \
            --base-url $(BASE_URL) \
            --no-verify \
            --ics-config $(IAC_CONFIG_NAME) \
            --log-format json \
            --report-formats all \
            --report-name results-rapid7_iac \
            --report-path "$(System.DefaultWorkingDirectory)/mimics-reports" \
            --save-report \
            --no-fail \
            --verbose
        displayName: "Scan IaC files with Mimics"
        
        #Â Create Azure Devops work items for each finding produced by the IaC Mimics scan
      - script: |
          # Construct the URL for API requests, choosing the correct work item type and API version.
          url="https://dev.azure.com/$(AZURE_BOARDS_ORGANIZATION)/$(AZURE_BOARDS_PROJECT)/_apis/wit/workitems/\$Issue?api-version=6.0"

          # Specify the path to the SARIF file generated by the previous steps
          sarifFile="$(System.DefaultWorkingDirectory)/mimics-reports/results-rapid7_iac.sarif"

          # Check for the existence of the SARIF file and process it
          if [ -f "$sarifFile" ]; then
            echo "Found SARIF file: $sarifFile"

            # Iterate through each result in the SARIF file, extracting relevant details
            jq -c '.runs[].results[]' "$sarifFile" | while read -r result; do
              ruleId=$(jq -r ".ruleId" <<< $result)
              message=$(jq -r ".message.text" <<< $result)
              locations=$(jq -r '.locations[]' <<< $result)
              title=$(jq -c --arg ruleId "$ruleId" '.runs[].tool.driver.rules[] | select(.id == $ruleId).name' "$sarifFile")

              # Prepare a JSON payload for creating a new work item via the Azure DevOps REST API
              json=$(jq --arg ruleId "$ruleId" --arg message "$message" --arg title "$title" --arg project "$(AZURE_BOARDS_PROJECT)" '
                [
                  {"op": "add", "path": "/fields/System.Title", "value": $title},
                  {"op": "add", "path": "/fields/System.Description", "value": "<div>\($message)</div><pre style=\"white-space: pre-line\">\(.properties.changes)</pre>"},
                  {"op": "add", "path": "/fields/System.State", "value": "To Do"},
                  {"op": "add", "path": "/fields/System.AreaPath", "value": $project}
                ]
              ' <<< $locations)

              # Make an API call to create a new work item with the prepared payload
              curl -X POST -H "Content-Type: application/json-patch+json" -H "Authorization: Basic $(echo -n ":$PAT" | base64)" -d "$json" "$url"
            done
          else
            echo "SARIF file not found: $sarifFile"
          fi
        displayName: "Process SARIF and Create Azure Board Work Items"
        env:
          PAT: $(PAT) # Pass the Personal Access Token (PAT) securely as an environment variable

      # Publish additional files (results-rapid7_iac artifacts)
      - task: PublishBuildArtifacts@1
        displayName: "Publish Scan Artifacts"
        inputs:
          pathtoPublish: "$(System.DefaultWorkingDirectory)/mimics-reports"
          artifactName: "results-rapid7_iac" # Publishes the scan reports as build artifacts for later access

      # Publish the HTML report using the PublishHtmlReport task
      - task: PublishHtmlReport@1
        condition: succeededOrFailed()
        inputs:
          reportDir: $(System.DefaultWorkingDirectory)/mimics-reports/results-rapid7_iac.html
          tabName: "R7 IaC Scan Results" # Publishes the HTML scan report to the Azure DevOps build summary for easy access

